/* Auto generated code [enum]
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated
 */
{% for dep in dependencies %}import { {{", ".join(dep[0])}} } from "{{dep[1]}}";
{% endfor %}

export type {{class_name}}JSON = {{typeref_json(decl["tref"])}};
export type {{class_name}}Like = {{typeref_json(decl["tref"])}};

export function isValid{{class_name}}(value: {{class_name}}Like): boolean {
  return ({%- for entry in decl["entries"] %}value === {{class_name}}.{{ts_name(entry["name"])}}{{" || " if not loop.last }}
    {% endfor %});
}

export class {{class_name}} extends {{ref_name}} {
  {%- for entry in decl["entries"] %}static {{ts_name(entry["name"])}} = {{entry["value"]}};
  {%- endfor %}

  constructor(value: {{class_name}}Like = {{class_name}}.{{ts_name(decl["entries"][0]["name"])}}) {
    if (!isValid{{class_name}}(value))
      throw new Error(`Invalid {{class_name}} value ${value}`);
    super(value);
  }

  serialize(blob?: VariableBlob): VariableBlob {
    if (!isValid{{class_name}}(this.num))
      throw new Error("Attempting to serialize an invalid value");
    const vb = blob || new VariableBlob(this.calcSerializedSize());
    vb.serialize(new {{ref_name}}(this.num));
    if (!blob) vb.resetCursor();
    return vb;
  }

  static deserialize(vb: VariableBlob): {{class_name}}{
    return new {{class_name}}({{ref_name}}.deserialize(vb).num);
  }
}